Starting unittest 2:
All tests passed
Starting unittest 3:
All tests passed
Starting unittest 4:
All tests passed
Starting cardtest 1:
All tests passed
Starting cardtest 2:
All tests passed
Starting cardtest 3:
All tests passed
Starting cardtest 4:
All tests passed
File 'dominion.c'
Lines executed:25.04% of 559
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       30:    8:int compare(const void* a, const void* b) {
       30:    9:	if (*(int*)a > *(int*)b)
    #####:   10:		return 1;
       30:   11:	if (*(int*)a < *(int*)b)
        8:   12:		return -1;
       22:   13:	return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:	return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		int k8, int k9, int k10) {
    #####:   23:	int* k = malloc(10 * sizeof(int));
    #####:   24:	k[0] = k1;
    #####:   25:	k[1] = k2;
    #####:   26:	k[2] = k3;
    #####:   27:	k[3] = k4;
    #####:   28:	k[4] = k5;
    #####:   29:	k[5] = k6;
    #####:   30:	k[6] = k7;
    #####:   31:	k[7] = k8;
    #####:   32:	k[8] = k9;
    #####:   33:	k[9] = k10;
    #####:   34:	return k;
        -:   35:}
        -:   36:
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		struct gameState *state) {
        -:   39:
        -:   40:	int i;
        -:   41:	int j;
        -:   42:	int it;			
        -:   43:	//set up random number generator
        1:   44:	SelectStream(1);
        1:   45:	PutSeed((long)randomSeed);
        -:   46:
        -:   47:	//check number of players
        1:   48:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:	{
    #####:   50:		return -1;
        -:   51:	}
        -:   52:
        -:   53:	//set number of players
        1:   54:	state->numPlayers = numPlayers;
        -:   55:
        -:   56:	//check selected kingdom cards are different
       11:   57:	for (i = 0; i < 10; i++)
        -:   58:	{
      110:   59:		for (j = 0; j < 10; j++)
        -:   60:		{
      100:   61:			if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:			{
    #####:   63:				return -1;
        -:   64:			}
        -:   65:		}
        -:   66:	}
        -:   67:
        -:   68:
        -:   69:	//initialize supply
        -:   70:	///////////////////////////////
        -:   71:
        -:   72:	//set number of Curse cards
        1:   73:	if (numPlayers == 2)
        -:   74:	{
        1:   75:		state->supplyCount[curse] = 10;
        -:   76:	}
    #####:   77:	else if (numPlayers == 3)
        -:   78:	{
    #####:   79:		state->supplyCount[curse] = 20;
        -:   80:	}
        -:   81:	else
        -:   82:	{
    #####:   83:		state->supplyCount[curse] = 30;
        -:   84:	}
        -:   85:
        -:   86:	//set number of Victory cards
        1:   87:	if (numPlayers == 2)
        -:   88:	{
        1:   89:		state->supplyCount[estate] = 8;
        1:   90:		state->supplyCount[duchy] = 8;
        1:   91:		state->supplyCount[province] = 8;
        -:   92:	}
        -:   93:	else
        -:   94:	{
    #####:   95:		state->supplyCount[estate] = 12;
    #####:   96:		state->supplyCount[duchy] = 12;
    #####:   97:		state->supplyCount[province] = 12;
        -:   98:	}
        -:   99:
        -:  100:	//set number of Treasure cards
        1:  101:	state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:	state->supplyCount[silver] = 40;
        1:  103:	state->supplyCount[gold] = 30;
        -:  104:
        -:  105:	//set number of Kingdom cards
       21:  106:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:	{
      165:  108:		for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:		{
      155:  110:			if (kingdomCards[j] == i)
        -:  111:			{
        -:  112:				//check if card is a 'Victory' Kingdom card
       10:  113:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:				{
        2:  115:					if (numPlayers == 2){ 
        1:  116:						state->supplyCount[i] = 8; 
        -:  117:					}
    #####:  118:					else{ state->supplyCount[i] = 12; }
        -:  119:				}
        -:  120:				else
        -:  121:				{
        9:  122:					state->supplyCount[i] = 10;
        -:  123:				}
       10:  124:				break;
        -:  125:			}
        -:  126:			else    //card is not in the set choosen for the game
        -:  127:			{
      145:  128:				state->supplyCount[i] = -1;
        -:  129:			}
        -:  130:		}
        -:  131:
        -:  132:	}
        -:  133:
        -:  134:	////////////////////////
        -:  135:	//supply intilization complete
        -:  136:
        -:  137:	//set player decks
        3:  138:	for (i = 0; i < numPlayers; i++)
        -:  139:	{
        2:  140:		state->deckCount[i] = 0;
        8:  141:		for (j = 0; j < 3; j++)
        -:  142:		{
        6:  143:			state->deck[i][j] = estate;
        6:  144:			state->deckCount[i]++;
        -:  145:		}
       16:  146:		for (j = 3; j < 10; j++)
        -:  147:		{
       14:  148:			state->deck[i][j] = copper;
       14:  149:			state->deckCount[i]++;		
        -:  150:		}
        -:  151:	}
        -:  152:
        -:  153:	//shuffle player decks
        3:  154:	for (i = 0; i < numPlayers; i++)
        -:  155:	{
        2:  156:		if ( shuffle(i, state) < 0 )
        -:  157:		{
    #####:  158:			return -1;
        -:  159:		}
        -:  160:	}
        -:  161:
        -:  162:	//draw player hands
        3:  163:	for (i = 0; i < numPlayers; i++)
        -:  164:	{  
        -:  165:		//initialize hand size to zero
        2:  166:		state->handCount[i] = 0;
        2:  167:		state->discardCount[i] = 0;
        -:  168:		//draw 5 cards
        -:  169:		// for (j = 0; j < 5; j++)
        -:  170:		//	{
        -:  171:		//	  drawCard(i, state);
        -:  172:		//	}
        -:  173:	}
        -:  174:
        -:  175:	//set embargo tokens to 0 for all supply piles
       28:  176:	for (i = 0; i <= treasure_map; i++)
        -:  177:	{
       27:  178:		state->embargoTokens[i] = 0;
        -:  179:	}
        -:  180:
        -:  181:	//initialize first player's turn
        1:  182:	state->outpostPlayed = 0;
        1:  183:	state->phase = 0;
        1:  184:	state->numActions = 1;
        1:  185:	state->numBuys = 1;
        1:  186:	state->playedCardCount = 0;
        1:  187:	state->whoseTurn = 0;
        1:  188:	state->handCount[state->whoseTurn] = 0;
        -:  189:	//int it; move to top
        -:  190:
        -:  191:	//Moved draw cards to here, only drawing at the start of a turn
        6:  192:	for (it = 0; it < 5; it++){
        5:  193:		drawCard(state->whoseTurn, state);
        -:  194:	}
        -:  195:
        1:  196:	updateCoins(state->whoseTurn, state, 0);
        -:  197:
        1:  198:	return 0;
        -:  199:}
        -:  200:
        2:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:	int newDeck[MAX_DECK];
        2:  205:	int newDeckPos = 0;
        -:  206:	int card;
        -:  207:	int i;
        -:  208:
        2:  209:	if (state->deckCount[player] < 1)
    #####:  210:		return -1;
        2:  211:	qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:	while (state->deckCount[player] > 0) {
       20:  215:		card = floor(Random() * state->deckCount[player]);
       20:  216:		newDeck[newDeckPos] = state->deck[player][card];
       20:  217:		newDeckPos++;
       57:  218:		for (i = card; i < state->deckCount[player]-1; i++) {
       37:  219:			state->deck[player][i] = state->deck[player][i+1];
        -:  220:		}
       20:  221:		state->deckCount[player]--;
        -:  222:	}
       22:  223:	for (i = 0; i < newDeckPos; i++) {
       20:  224:		state->deck[player][i] = newDeck[i];
       20:  225:		state->deckCount[player]++;
        -:  226:	}
        -:  227:
        2:  228:	return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:	int card;
    #####:  234:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:	//check if it is the right phase
    #####:  237:	if (state->phase != 0)
        -:  238:	{
    #####:  239:		return -1;
        -:  240:	}
        -:  241:
        -:  242:	//check if player has enough actions
    #####:  243:	if ( state->numActions < 1 )
        -:  244:	{
    #####:  245:		return -1;
        -:  246:	}
        -:  247:
        -:  248:	//get card played
    #####:  249:	card = handCard(handPos, state);
        -:  250:
        -:  251:	//check if selected card is an action
    #####:  252:	if ( card < adventurer || card > treasure_map )
        -:  253:	{
    #####:  254:		return -1;
        -:  255:	}
        -:  256:
        -:  257:	//play card
    #####:  258:	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:	{
    #####:  260:		return -1;
        -:  261:	}
        -:  262:
        -:  263:	//reduce number of actions
    #####:  264:	state->numActions--;
        -:  265:
        -:  266:	//update coins (Treasure cards may be added with card draws)
    #####:  267:	updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:	return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:	int who;
        -:  274:	if (DEBUG){
        -:  275:		printf("Entering buyCard...\n");
        -:  276:	}
        -:  277:
        -:  278:	// I don't know what to do about the phase thing.
        -:  279:
    #####:  280:	who = state->whoseTurn;
        -:  281:
    #####:  282:	if (state->numBuys < 1){
        -:  283:		if (DEBUG)
        -:  284:			printf("You do not have any buys left\n");
    #####:  285:		return -1;
    #####:  286:	} else if (supplyCount(supplyPos, state) <1){
        -:  287:		if (DEBUG)
        -:  288:			printf("There are not any of that type of card left\n");
    #####:  289:		return -1;
    #####:  290:	} else if (state->coins < getCost(supplyPos)){
        -:  291:		if (DEBUG) 
        -:  292:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:		return -1;
        -:  294:	} else {
    #####:  295:		state->phase=1;
        -:  296:		//state->supplyCount[supplyPos]--;
    #####:  297:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:		state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:		state->numBuys--;
        -:  301:		if (DEBUG)
        -:  302:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:	}
        -:  304:
        -:  305:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:	//state->discardCount[who]++;
        -:  307:
    #####:  308:	return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:	return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:	int currentPlayer = whoseTurn(state);
    #####:  317:	return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        1:  320:int supplyCount(int card, struct gameState *state) {
        1:  321:	return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:	int i;
    #####:  326:	int count = 0;
        -:  327:
    #####:  328:	for (i = 0; i < state->deckCount[player]; i++)
        -:  329:	{
    #####:  330:		if (state->deck[player][i] == card) count++;
        -:  331:	}
        -:  332:
    #####:  333:	for (i = 0; i < state->handCount[player]; i++)
        -:  334:	{
    #####:  335:		if (state->hand[player][i] == card) count++;
        -:  336:	}
        -:  337:
    #####:  338:	for (i = 0; i < state->discardCount[player]; i++)
        -:  339:	{
    #####:  340:		if (state->discard[player][i] == card) count++;
        -:  341:	}
        -:  342:
    #####:  343:	return count;
        -:  344:}
        -:  345:
        2:  346:int whoseTurn(struct gameState *state) {
        2:  347:	return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:	int k;
        -:  352:	int i;
    #####:  353:	int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:	//Discard hand
    #####:  356:	for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:	}
    #####:  360:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:	//Code for determining the player
    #####:  363:	if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:	}
        -:  366:	else{
    #####:  367:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:	}
        -:  369:
    #####:  370:	state->outpostPlayed = 0;
    #####:  371:	state->phase = 0;
    #####:  372:	state->numActions = 1;
    #####:  373:	state->coins = 0;
    #####:  374:	state->numBuys = 1;
    #####:  375:	state->playedCardCount = 0;
    #####:  376:	state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:	//int k; move to top
        -:  379:	//Next player draws hand
    #####:  380:	for (k = 0; k < 5; k++){
    #####:  381:		drawCard(state->whoseTurn, state);//Draw a card
        -:  382:	}
        -:  383:
        -:  384:	//Update money
    #####:  385:	updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:	return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:	int i;
        -:  392:	int j;
        -:  393:
        -:  394:	//if stack of Province cards is empty, the game ends
    #####:  395:	if (state->supplyCount[province] == 0)
        -:  396:	{
    #####:  397:		return 1;
        -:  398:	}
        -:  399:
        -:  400:	//if three supply pile are at 0, the game ends
    #####:  401:	j = 0;
    #####:  402:	for (i = 0; i < 25; i++)
        -:  403:	{
    #####:  404:		if (state->supplyCount[i] == 0)
        -:  405:		{
    #####:  406:			j++;
        -:  407:		}
        -:  408:	}
    #####:  409:	if ( j >= 3)
        -:  410:	{
    #####:  411:		return 1;
        -:  412:	}
        -:  413:
    #####:  414:	return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:	int i;
    #####:  420:	int score = 0;
        -:  421:	//score from hand
    #####:  422:	for (i = 0; i < state->handCount[player]; i++)
        -:  423:	{
    #####:  424:		if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:		if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:		if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:		if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:		if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:		if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:	}
        -:  431:
        -:  432:	//score from discard
    #####:  433:	for (i = 0; i < state->discardCount[player]; i++)
        -:  434:	{
    #####:  435:		if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:		if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:		if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:		if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:		if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:		if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:	}
        -:  442:
        -:  443:	//score from deck
    #####:  444:	for (i = 0; i < state->discardCount[player]; i++)
        -:  445:	{
    #####:  446:		if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:		if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:		if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:		if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:		if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:		if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:	}
        -:  453:
    #####:  454:	return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:	int i;	
        -:  459:	int j;
        -:  460:	int highScore;
        -:  461:	int currentPlayer;
        -:  462:
        -:  463:	//get score for each player
    #####:  464:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:	{
        -:  466:		//set unused player scores to -9999
    #####:  467:		if (i >= state->numPlayers)
        -:  468:		{
    #####:  469:			players[i] = -9999;
        -:  470:		}
        -:  471:		else
        -:  472:		{
    #####:  473:			players[i] = scoreFor (i, state);
        -:  474:		}
        -:  475:	}
        -:  476:
        -:  477:	//find highest score
    #####:  478:	j = 0;
    #####:  479:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:	{
    #####:  481:		if (players[i] > players[j])
        -:  482:		{
    #####:  483:			j = i;
        -:  484:		}
        -:  485:	}
    #####:  486:	highScore = players[j];
        -:  487:
        -:  488:	//add 1 to players who had less turns
    #####:  489:	currentPlayer = whoseTurn(state);
    #####:  490:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:	{
    #####:  492:		if ( players[i] == highScore && i > currentPlayer )
        -:  493:		{
    #####:  494:			players[i]++;
        -:  495:		}
        -:  496:	}
        -:  497:
        -:  498:	//find new highest score
    #####:  499:	j = 0;
    #####:  500:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:	{
    #####:  502:		if ( players[i] > players[j] )
        -:  503:		{
    #####:  504:			j = i;
        -:  505:		}
        -:  506:	}
    #####:  507:	highScore = players[j];
        -:  508:
        -:  509:	//set winners in array to 1 and rest to 0
    #####:  510:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:	{
    #####:  512:		if ( players[i] == highScore )
        -:  513:		{
    #####:  514:			players[i] = 1;
        -:  515:		}
        -:  516:		else
        -:  517:		{
    #####:  518:			players[i] = 0;
        -:  519:		}
        -:  520:	}
        -:  521:
    #####:  522:	return 0;
        -:  523:}
        -:  524:
        5:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:	int deckCounter;
        5:  528:	if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:		//Step 1 Shuffle the discard pile back into a deck
        -:  531:		int i;
        -:  532:		//Move discard to deck
    #####:  533:		for (i = 0; i < state->discardCount[player];i++){
    #####:  534:			state->deck[player][i] = state->discard[player][i];
    #####:  535:			state->discard[player][i] = -1;
        -:  536:		}
        -:  537:
    #####:  538:		state->deckCount[player] = state->discardCount[player];
    #####:  539:		state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:		//Shufffle the deck
    #####:  542:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:		if (DEBUG){//Debug statements
        -:  545:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:		}
        -:  547:
    #####:  548:		state->discardCount[player] = 0;
        -:  549:
        -:  550:		//Step 2 Draw Card
    #####:  551:		count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:		if (DEBUG){//Debug statements
        -:  554:			printf("Current hand count: %d\n", count);
        -:  555:		}
        -:  556:
    #####:  557:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:		if (deckCounter == 0)
    #####:  560:			return -1;
        -:  561:
    #####:  562:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:		state->deckCount[player]--;
    #####:  564:		state->handCount[player]++;//Increment hand count
        -:  565:	}
        -:  566:
        -:  567:	else{
        5:  568:		int count = state->handCount[player];//Get current hand count for player
        -:  569:		int deckCounter;
        -:  570:		if (DEBUG){//Debug statements
        -:  571:			printf("Current hand count: %d\n", count);
        -:  572:		}
        -:  573:
        5:  574:		deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  575:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  576:		state->deckCount[player]--;
        5:  577:		state->handCount[player]++;//Increment hand count
        -:  578:	}
        -:  579:
        5:  580:	return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:	switch( cardNumber ) 
        -:  586:	{
        -:  587:		case curse:
    #####:  588:			return 0;
        -:  589:		case estate:
    #####:  590:			return 2;
        -:  591:		case duchy:
    #####:  592:			return 5;
        -:  593:		case province:
    #####:  594:			return 8;
        -:  595:		case copper:
    #####:  596:			return 0;
        -:  597:		case silver:
    #####:  598:			return 3;
        -:  599:		case gold:
    #####:  600:			return 6;
        -:  601:		case adventurer:
    #####:  602:			return 6;
        -:  603:		case council_room:
    #####:  604:			return 5;
        -:  605:		case feast:
    #####:  606:			return 4;
        -:  607:		case gardens:
    #####:  608:			return 4;
        -:  609:		case mine:
    #####:  610:			return 5;
        -:  611:		case remodel:
    #####:  612:			return 4;
        -:  613:		case smithy:
    #####:  614:			return 4;
        -:  615:		case village:
    #####:  616:			return 3;
        -:  617:		case baron:
    #####:  618:			return 4;
        -:  619:		case great_hall:
    #####:  620:			return 3;
        -:  621:		case minion:
    #####:  622:			return 5;
        -:  623:		case steward:
    #####:  624:			return 3;
        -:  625:		case tribute:
    #####:  626:			return 5;
        -:  627:		case ambassador:
    #####:  628:			return 3;
        -:  629:		case cutpurse:
    #####:  630:			return 4;
        -:  631:		case embargo: 
    #####:  632:			return 2;
        -:  633:		case outpost:
    #####:  634:			return 5;
        -:  635:		case salvager:
    #####:  636:			return 4;
        -:  637:		case sea_hag:
    #####:  638:			return 4;
        -:  639:		case treasure_map:
    #####:  640:			return 4;
        -:  641:	}
        -:  642:
    #####:  643:	return -1;
        -:  644:}
        -:  645:
    #####:  646:int adventureAction(int drawntreasure, struct gameState *state, int cardDrawn, int currentPlayer, int* temphand, int z){
    #####:  647:	while(drawntreasure<2){
    #####:  648:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  649:			shuffle(currentPlayer, state);
        -:  650:		}
    #####:  651:		drawCard(currentPlayer, state);
    #####:  652:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  653:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  654:			drawntreasure++;
        -:  655:		else{
    #####:  656:			temphand[z]=cardDrawn;
    #####:  657:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  658:			z++;
        -:  659:		}
        -:  660:	}
    #####:  661:	while(z-1>=0){
    #####:  662:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  663:		z=z-1;
        -:  664:	}
    #####:  665:	return 0;
        -:  666:}			
        -:  667:
    #####:  668:int councilAction(struct gameState *state, int currentPlayer, int handPos){
        -:  669:	int i;
        -:  670:	//+4 Cards
        -:  671:	// Bug here
    #####:  672:	for (i = 0; i < 2; i++){
    #####:  673:		drawCard(currentPlayer, state);
        -:  674:	}
        -:  675:	//+1 Buy
    #####:  676:	state->numBuys++;
        -:  677:	//Each other player draws a card
    #####:  678:	for (i = 0; i < state->numPlayers; i++){
    #####:  679:		if ( i != currentPlayer ){
    #####:  680:			drawCard(i, state);
        -:  681:		}
        -:  682:	}
        -:  683:	//put played card in played card pile
    #####:  684:	discardCard(handPos, currentPlayer, state, 0);
    #####:  685:	return 0;
        -:  686:}
        -:  687:
    #####:  688:int feastAction(struct gameState *state, int* temphand, int choice1, int currentPlayer){
        -:  689:	int i, x;
        -:  690:	//gain card with cost up to 5
        -:  691:	//Backup hand
    #####:  692:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  693:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  694:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  695:	}
        -:  696:	//Backup hand
        -:  697:	//Update Coins for Buy
    #####:  698:	updateCoins(currentPlayer, state, 5);
    #####:  699:	x = 1;//Condition to loop on
    #####:  700:	while( x == 1) {//Buy one card
    #####:  701:		if (supplyCount(choice1, state) <= 0){
        -:  702:			if (DEBUG)
        -:  703:				printf("None of that card left, sorry!\n");
        -:  704:
        -:  705:			if (DEBUG){
        -:  706:				printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  707:			}
        -:  708:		}
    #####:  709:		else if (state->coins < getCost(choice1)){
    #####:  710:			printf("That card is too expensive!\n");
        -:  711:
        -:  712:			if (DEBUG){
        -:  713:				printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  714:			}
        -:  715:		}
        -:  716:		else{
        -:  717:
        -:  718:			if (DEBUG){
        -:  719:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  720:			}
        -:  721:
    #####:  722:			gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  723:			x = 0;//No more buying cards
        -:  724:
        -:  725:			if (DEBUG){
        -:  726:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  727:			}
        -:  728:
        -:  729:		}
        -:  730:	}     
        -:  731:
        -:  732:	//Reset Hand
    #####:  733:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  734:		state->hand[currentPlayer][i] = temphand[i];
    #####:  735:		temphand[i] = -1;
        -:  736:	}
        -:  737:	//Reset Hand
        -:  738:
    #####:  739:	return 0;
        -:  740:}
        -:  741:
    #####:  742:int mineAction(struct gameState *state, int choice1, int choice2, int currentPlayer, int handPos){
        -:  743:	int i, j;
    #####:  744:	j = state->hand[currentPlayer][choice1];  //store card we will trash
    #####:  745:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold){
    #####:  746:		return -1;
        -:  747:	}
        -:  748:
    #####:  749:	if (choice2 > treasure_map || choice2 < curse){
    #####:  750:		return -1;
        -:  751:	}
        -:  752:
    #####:  753:	if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ){
    #####:  754:		return -1;
        -:  755:	}
        -:  756:
    #####:  757:	gainCard(choice2, state, 2, currentPlayer);
        -:  758:
        -:  759:	//discard card from hand
    #####:  760:	discardCard(handPos, currentPlayer, state, 0);
        -:  761:
        -:  762:	//discard trashed card
    #####:  763:	for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  764:		if (state->hand[currentPlayer][i] == j){
    #####:  765:			discardCard(i, currentPlayer, state, 0);			
    #####:  766:			break;
        -:  767:		}
        -:  768:	}
        -:  769:
    #####:  770:	return 0;
        -:  771:}
        -:  772:
    #####:  773:int remodelAction(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2){
        -:  774:	int i, j;
    #####:  775:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  776:
    #####:  777:	if((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2)){
    #####:  778:		return -1;
        -:  779:	}
        -:  780:
        -:  781:	// bug here
    #####:  782:	gainCard(choice2, state, 10, currentPlayer);
        -:  783:
        -:  784:	//discard card from hand
    #####:  785:	discardCard(handPos, currentPlayer, state, 0);
        -:  786:
        -:  787:	//discard trashed card
    #####:  788:	for (i = 0; i < state->handCount[currentPlayer]; i++)	{
    #####:  789:		if (state->hand[currentPlayer][i] == j){
    #####:  790:			discardCard(i, currentPlayer, state, 0);			
    #####:  791:			break;
        -:  792:		}
        -:  793:	}
    #####:  794:	return 0;
        -:  795:}
        -:  796:
        2:  797:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  798:{
        -:  799:	int i, j, k, index;
        2:  800:	int currentPlayer = whoseTurn(state);
        2:  801:	int nextPlayer = currentPlayer + 1;
        -:  802:
        2:  803:	int tributeRevealedCards[2] = {-1, -1};
        -:  804:	int temphand[MAX_HAND];// moved above the if statement
        2:  805:	int drawntreasure=0;
        2:  806:	int cardDrawn=0;
        2:  807:	int z = 0;// this is the counter for the temp hand
        2:  808:	if (nextPlayer > (state->numPlayers - 1)){
    #####:  809:		nextPlayer = 0;
        -:  810:	}
        -:  811:
        -:  812:	//uses switch to select card and perform actions
        2:  813:	switch( card ) 
        -:  814:	{
        -:  815:		case adventurer:
    #####:  816:			return adventureAction(drawntreasure, state, cardDrawn, currentPlayer, temphand, z);
        -:  817:		case council_room:
    #####:  818:			return councilAction(state, currentPlayer, handPos);
        -:  819:		case feast:
    #####:  820:			return feastAction(state, temphand, choice1, currentPlayer);
        -:  821:		case gardens:
    #####:  822:			return -1;
        -:  823:		case mine:
    #####:  824:			return mineAction(state, choice1, choice2, currentPlayer, handPos);
        -:  825:		case remodel:
    #####:  826:			return remodelAction(state, currentPlayer, handPos, choice1, choice2);
        -:  827:		case smithy:
        -:  828:			//+3 Cards
    #####:  829:			for (i = 0; i < 3; i++)
        -:  830:			{
    #####:  831:				drawCard(currentPlayer, state);
        -:  832:			}
        -:  833:
        -:  834:			//discard card from hand
    #####:  835:			discardCard(handPos, currentPlayer, state, 0);
    #####:  836:			return 0;
        -:  837:
        -:  838:		case village:
        -:  839:			//+1 Card
    #####:  840:			drawCard(currentPlayer, state);
        -:  841:
        -:  842:			//+2 Actions
    #####:  843:			state->numActions = state->numActions + 2;
        -:  844:
        -:  845:			//discard played card from hand
    #####:  846:			discardCard(handPos, currentPlayer, state, 0);
    #####:  847:			return 0;
        -:  848:
        -:  849:		case baron:
    #####:  850:			state->numBuys++;//Increase buys by 1!
    #####:  851:			if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  852:				int p = 0;//Iterator for hand!
    #####:  853:				int card_not_discarded = 1;//Flag for discard set!
    #####:  854:				while(card_not_discarded){
    #####:  855:					if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  856:						state->coins += 4;//Add 4 coins to the amount of coins
    #####:  857:						state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  858:						state->discardCount[currentPlayer]++;
    #####:  859:						for (;p < state->handCount[currentPlayer]; p++){
    #####:  860:							state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  861:						}
    #####:  862:						state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  863:						state->handCount[currentPlayer]--;
    #####:  864:						card_not_discarded = 0;//Exit the loop
        -:  865:					}
    #####:  866:					else if (p > state->handCount[currentPlayer]){
        -:  867:						if(DEBUG) {
        -:  868:							printf("No estate cards in your hand, invalid choice\n");
        -:  869:							printf("Must gain an estate if there are any\n");
        -:  870:						}
    #####:  871:						if (supplyCount(estate, state) > 0){
    #####:  872:							gainCard(estate, state, 0, currentPlayer);
    #####:  873:							state->supplyCount[estate]--;//Decrement estates
    #####:  874:							if (supplyCount(estate, state) == 0){
    #####:  875:								isGameOver(state);
        -:  876:							}
        -:  877:						}
    #####:  878:						card_not_discarded = 0;//Exit the loop
        -:  879:					}
        -:  880:
        -:  881:					else{
    #####:  882:						p++;//Next card
        -:  883:					}
        -:  884:				}
        -:  885:			}
        -:  886:
        -:  887:			else{
    #####:  888:				if (supplyCount(estate, state) > 0){
    #####:  889:					gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  890:					state->supplyCount[estate]--;//Decrement Estates
    #####:  891:					if (supplyCount(estate, state) == 0){
    #####:  892:						isGameOver(state);
        -:  893:					}
        -:  894:				}
        -:  895:			}
        -:  896:
        -:  897:
    #####:  898:			return 0;
        -:  899:
        -:  900:		case great_hall:
        -:  901:			//+1 Card
    #####:  902:			drawCard(currentPlayer, state);
        -:  903:
        -:  904:			//+1 Actions
    #####:  905:			state->numActions++;
        -:  906:
        -:  907:			//discard card from hand
    #####:  908:			discardCard(handPos, currentPlayer, state, 0);
    #####:  909:			return 0;
        -:  910:
        -:  911:		case minion:
        -:  912:			//+1 action
    #####:  913:			state->numActions++;
        -:  914:
        -:  915:			//discard card from hand
    #####:  916:			discardCard(handPos, currentPlayer, state, 0);
        -:  917:
    #####:  918:			if (choice1)		//+2 coins
        -:  919:			{
    #####:  920:				state->coins = state->coins + 2;
        -:  921:			}
        -:  922:
    #####:  923:			else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  924:			{
        -:  925:				//discard hand
    #####:  926:				while(numHandCards(state) > 0)
        -:  927:				{
    #####:  928:					discardCard(handPos, currentPlayer, state, 0);
        -:  929:				}
        -:  930:
        -:  931:				//draw 4
    #####:  932:				for (i = 0; i < 4; i++)
        -:  933:				{
    #####:  934:					drawCard(currentPlayer, state);
        -:  935:				}
        -:  936:
        -:  937:				//other players discard hand and redraw if hand size > 4
    #####:  938:				for (i = 0; i < state->numPlayers; i++)
        -:  939:				{
    #####:  940:					if (i != currentPlayer)
        -:  941:					{
    #####:  942:						if ( state->handCount[i] > 4 )
        -:  943:						{
        -:  944:							//discard hand
    #####:  945:							while( state->handCount[i] > 0 )
        -:  946:							{
    #####:  947:								discardCard(handPos, i, state, 0);
        -:  948:							}
        -:  949:
        -:  950:							//draw 4
    #####:  951:							for (j = 0; j < 4; j++)
        -:  952:							{
    #####:  953:								drawCard(i, state);
        -:  954:							}
        -:  955:						}
        -:  956:					}
        -:  957:				}
        -:  958:
        -:  959:			}
    #####:  960:			return 0;
        -:  961:
        -:  962:		case steward:
    #####:  963:			if (choice1 == 1)
        -:  964:			{
        -:  965:				//+2 cards
    #####:  966:				drawCard(currentPlayer, state);
    #####:  967:				drawCard(currentPlayer, state);
        -:  968:			}
    #####:  969:			else if (choice1 == 2)
        -:  970:			{
        -:  971:				//+2 coins
    #####:  972:				state->coins = state->coins + 2;
        -:  973:			}
        -:  974:			else
        -:  975:			{
        -:  976:				//trash 2 cards in hand
    #####:  977:				discardCard(choice2, currentPlayer, state, 1);
    #####:  978:				discardCard(choice3, currentPlayer, state, 1);
        -:  979:			}
        -:  980:
        -:  981:			//discard card from hand
    #####:  982:			discardCard(handPos, currentPlayer, state, 0);
    #####:  983:			return 0;
        -:  984:
        -:  985:		case tribute:
    #####:  986:			if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  987:				if (state->deckCount[nextPlayer] > 0){
    #####:  988:					tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  989:					state->deckCount[nextPlayer]--;
        -:  990:				}
    #####:  991:				else if (state->discardCount[nextPlayer] > 0){
    #####:  992:					tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  993:					state->discardCount[nextPlayer]--;
        -:  994:				}
        -:  995:				else{
        -:  996:					//No Card to Reveal
        -:  997:					if (DEBUG){
        -:  998:						printf("No cards to reveal\n");
        -:  999:					}
        -: 1000:				}
        -: 1001:			}
        -: 1002:
        -: 1003:			else{
    #####: 1004:				if (state->deckCount[nextPlayer] == 0){
    #####: 1005:					for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1006:						state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1007:						state->deckCount[nextPlayer]++;
    #####: 1008:						state->discard[nextPlayer][i] = -1;
    #####: 1009:						state->discardCount[nextPlayer]--;
        -: 1010:					}
        -: 1011:
    #####: 1012:					shuffle(nextPlayer,state);//Shuffle the deck
        -: 1013:				} 
    #####: 1014:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1015:				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1016:				state->deckCount[nextPlayer]--;
    #####: 1017:				tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1018:				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1019:				state->deckCount[nextPlayer]--;
        -: 1020:			}    
        -: 1021:
    #####: 1022:			if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1023:				state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1024:				state->playedCardCount++;
    #####: 1025:				tributeRevealedCards[1] = -1;
        -: 1026:			}
        -: 1027:
    #####: 1028:			for (i = 0; i <= 2; i ++){
    #####: 1029:				if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1030:					state->coins += 2;
        -: 1031:				}
        -: 1032:
    #####: 1033:				else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1034:					drawCard(currentPlayer, state);
    #####: 1035:					drawCard(currentPlayer, state);
        -: 1036:				}
        -: 1037:				else{//Action Card
    #####: 1038:					state->numActions = state->numActions + 2;
        -: 1039:				}
        -: 1040:			}
        -: 1041:
    #####: 1042:			return 0;
        -: 1043:
        -: 1044:		case ambassador:
        2: 1045:			j = 0;		//used to check if player has enough cards to discard
        -: 1046:
        2: 1047:			if (choice2 > 2 || choice2 < 0)
        -: 1048:			{
        1: 1049:				return -1;				
        -: 1050:			}
        -: 1051:
        1: 1052:			if (choice1 == handPos)
        -: 1053:			{
    #####: 1054:				return -1;
        -: 1055:			}
        -: 1056:
        6: 1057:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1058:			{
        5: 1059:				if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1060:				{
        1: 1061:					j++;
        -: 1062:				}
        -: 1063:			}
        1: 1064:			if (j < choice2)
        -: 1065:			{
    #####: 1066:				return -1;				
        -: 1067:			}
        -: 1068:
        -: 1069:			if (DEBUG) 
        -: 1070:				printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1071:
        -: 1072:			//increase supply count for choosen card by amount being discarded
        1: 1073:			state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1074:
        -: 1075:			//each other player gains a copy of revealed card
        3: 1076:			for (i = 0; i < state->numPlayers; i++)
        -: 1077:			{
        2: 1078:				if (i != currentPlayer)
        -: 1079:				{
        1: 1080:					gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1081:				}
        -: 1082:			}
        -: 1083:
        -: 1084:			//discard played card from hand
        1: 1085:			discardCard(handPos, currentPlayer, state, 0);			
        -: 1086:
        -: 1087:			//trash copies of cards returned to supply
        2: 1088:			for (j = 0; j < choice2; j++)
        -: 1089:			{
        1: 1090:				for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1091:				{
        1: 1092:					if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1093:					{
        1: 1094:						discardCard(i, currentPlayer, state, 1);
        1: 1095:						break;
        -: 1096:					}
        -: 1097:				}
        -: 1098:			}			
        -: 1099:
        1: 1100:			return 0;
        -: 1101:
        -: 1102:		case cutpurse:
        -: 1103:
    #####: 1104:			updateCoins(currentPlayer, state, 2);
    #####: 1105:			for (i = 0; i < state->numPlayers; i++)
        -: 1106:			{
    #####: 1107:				if (i != currentPlayer)
        -: 1108:				{
    #####: 1109:					for (j = 0; j < state->handCount[i]; j++)
        -: 1110:					{
    #####: 1111:						if (state->hand[i][j] == copper)
        -: 1112:						{
    #####: 1113:							discardCard(j, i, state, 0);
    #####: 1114:							break;
        -: 1115:						}
    #####: 1116:						if (j == state->handCount[i])
        -: 1117:						{
    #####: 1118:							for (k = 0; k < state->handCount[i]; k++)
        -: 1119:							{
        -: 1120:								if (DEBUG)
        -: 1121:									printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1122:							}	
    #####: 1123:							break;
        -: 1124:						}		
        -: 1125:					}
        -: 1126:
        -: 1127:				}
        -: 1128:
        -: 1129:			}				
        -: 1130:
        -: 1131:			//discard played card from hand
    #####: 1132:			discardCard(handPos, currentPlayer, state, 0);			
        -: 1133:
    #####: 1134:			return 0;
        -: 1135:
        -: 1136:
        -: 1137:		case embargo: 
        -: 1138:			//+2 Coins
    #####: 1139:			state->coins = state->coins + 2;
        -: 1140:
        -: 1141:			//see if selected pile is in play
    #####: 1142:			if ( state->supplyCount[choice1] == -1 )
        -: 1143:			{
    #####: 1144:				return -1;
        -: 1145:			}
        -: 1146:
        -: 1147:			//add embargo token to selected supply pile
    #####: 1148:			state->embargoTokens[choice1]++;
        -: 1149:
        -: 1150:			//trash card
    #####: 1151:			discardCard(handPos, currentPlayer, state, 1);		
    #####: 1152:			return 0;
        -: 1153:
        -: 1154:		case outpost:
        -: 1155:			//set outpost flag
    #####: 1156:			state->outpostPlayed++;
        -: 1157:
        -: 1158:			//discard card
    #####: 1159:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1160:			return 0;
        -: 1161:
        -: 1162:		case salvager:
        -: 1163:			//+1 buy
    #####: 1164:			state->numBuys++;
        -: 1165:
    #####: 1166:			if (choice1)
        -: 1167:			{
        -: 1168:				//gain coins equal to trashed card
    #####: 1169:				state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1170:				//trash card
    #####: 1171:				discardCard(choice1, currentPlayer, state, 1);	
        -: 1172:			}
        -: 1173:
        -: 1174:			//discard card
    #####: 1175:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1176:			return 0;
        -: 1177:
        -: 1178:		case sea_hag:
    #####: 1179:			for (i = 0; i < state->numPlayers; i++){
    #####: 1180:				if (i != currentPlayer){
    #####: 1181:					state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1182:					state->discardCount[i]++;
    #####: 1183:					state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1184:				}
        -: 1185:			}
    #####: 1186:			return 0;
        -: 1187:
        -: 1188:		case treasure_map:
        -: 1189:			//search hand for another treasure_map
    #####: 1190:			index = -1;
    #####: 1191:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1192:			{
    #####: 1193:				if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1194:				{
    #####: 1195:					index = i;
    #####: 1196:					break;
        -: 1197:				}
        -: 1198:			}
    #####: 1199:			if (index > -1)
        -: 1200:			{
        -: 1201:				//trash both treasure cards
    #####: 1202:				discardCard(handPos, currentPlayer, state, 1);
    #####: 1203:				discardCard(index, currentPlayer, state, 1);
        -: 1204:
        -: 1205:				//gain 4 Gold cards
    #####: 1206:				for (i = 0; i < 4; i++)
        -: 1207:				{
    #####: 1208:					gainCard(gold, state, 1, currentPlayer);
        -: 1209:				}
        -: 1210:
        -: 1211:				//return success
    #####: 1212:				return 1;
        -: 1213:			}
        -: 1214:
        -: 1215:			//no second treasure_map found in hand
    #####: 1216:			return -1;
        -: 1217:	}
        -: 1218:
    #####: 1219:	return -1;
        -: 1220:}
        -: 1221:
        2: 1222:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1223:{
        -: 1224:
        -: 1225:	//if card is not trashed, added to Played pile 
        2: 1226:	if (trashFlag < 1)
        -: 1227:	{
        -: 1228:		//add card to played pile
        1: 1229:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        1: 1230:		state->playedCardCount++;
        -: 1231:	}
        -: 1232:
        -: 1233:	//set played card to -1
        2: 1234:	state->hand[currentPlayer][handPos] = -1;
        -: 1235:
        -: 1236:	//remove card from player's hand
        2: 1237:	if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1238:	{
        -: 1239:		//reduce number of cards in hand
    #####: 1240:		state->handCount[currentPlayer]--;
        -: 1241:	}
        2: 1242:	else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1243:	{
        -: 1244:		//reduce number of cards in hand
    #####: 1245:		state->handCount[currentPlayer]--;
        -: 1246:	}
        -: 1247:	else 	
        -: 1248:	{
        -: 1249:		//replace discarded card with last card in hand
        2: 1250:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1251:		//set last card to -1
        2: 1252:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1253:		//reduce number of cards in hand
        2: 1254:		state->handCount[currentPlayer]--;
        -: 1255:	}
        -: 1256:
        2: 1257:	return 0;
        -: 1258:}
        -: 1259:
        1: 1260:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1261:{
        -: 1262:	//Note: supplyPos is enum of choosen card
        -: 1263:
        -: 1264:	//check if supply pile is empty (0) or card is not used in game (-1)
        1: 1265:	if ( supplyCount(supplyPos, state) < 1 )
        -: 1266:	{
    #####: 1267:		return -1;
        -: 1268:	}
        -: 1269:
        -: 1270:	//added card for [whoseTurn] current player:
        -: 1271:	// toFlag = 0 : add to discard
        -: 1272:	// toFlag = 1 : add to deck
        -: 1273:	// toFlag = 2 : add to hand
        -: 1274:
        1: 1275:	if (toFlag == 1)
        -: 1276:	{
    #####: 1277:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1278:		state->deckCount[player]++;
        -: 1279:	}
        1: 1280:	else if (toFlag == 2)
        -: 1281:	{
    #####: 1282:		state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1283:		state->handCount[player]++;
        -: 1284:	}
        -: 1285:	else
        -: 1286:	{
        1: 1287:		state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1288:		state->discardCount[player]++;
        -: 1289:	}
        -: 1290:
        -: 1291:	//decrease number in supply pile
        1: 1292:	state->supplyCount[supplyPos]--;
        -: 1293:
        1: 1294:	return 0;
        -: 1295:}
        -: 1296:
        1: 1297:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1298:{
        -: 1299:	int i;
        -: 1300:
        -: 1301:	//reset coin count
        1: 1302:	state->coins = 0;
        -: 1303:
        -: 1304:	//add coins for each Treasure card in player's hand
        6: 1305:	for (i = 0; i < state->handCount[player]; i++)
        -: 1306:	{
        5: 1307:		if (state->hand[player][i] == copper)
        -: 1308:		{
        4: 1309:			state->coins += 1;
        -: 1310:		}
        1: 1311:		else if (state->hand[player][i] == silver)
        -: 1312:		{
    #####: 1313:			state->coins += 2;
        -: 1314:		}
        1: 1315:		else if (state->hand[player][i] == gold)
        -: 1316:		{
    #####: 1317:			state->coins += 3;
        -: 1318:		}	
        -: 1319:	}	
        -: 1320:
        -: 1321:	//add bonus
        1: 1322:	state->coins += bonus;
        -: 1323:
        1: 1324:	return 0;
        -: 1325:}
        -: 1326:
        -: 1327:
        -: 1328://end of dominion.c
        -: 1329:
